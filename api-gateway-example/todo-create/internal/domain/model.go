package domain

import (
	"go.mongodb.org/mongo-driver/bson/primitive"
	"time"
)

// TModel describes the object /*
type TModel struct {
	// ID the identifier generated by db
	ID interface{} `json:"id,omitempty" bson:"_id,omitempty"`
	// Name is the name of the card
	Name string `json:"name,omitempty" bson:"name,omitempty"`
	// Priority must be one of these: ['urgent', 'high', 'normal', 'medium', 'low']
	Priority string `json:"priority,omitempty" bson:"priority,omitempty"`
	// CreatedAt describes when the card has been created
	CreatedAt time.Time `json:"created_at,omitempty" bson:"created_at,omitempty"`
	// UpdatedAt describes when the card has been updated
	UpdatedAt time.Time `json:"updated_at,omitempty" bson:"updated_at,omitempty"`
}

type MongoModel struct {
	// ID the identifier generated by db
	ID primitive.ObjectID `json:"id,omitempty" bson:"_id,omitempty"`
	// Name is the name of the card
	Name string `json:"name,omitempty" bson:"name,omitempty"`
	// Priority must be one of these: ['urgent', 'high', 'normal', 'medium', 'low']
	Status string `json:"status,omitempty" bson:"status,omitempty"`
	// CreatedAt describes when the card has been created
	CreatedAt *time.Time `json:"created_at,omitempty" bson:"created_at,omitempty"`
	// UpdatedAt describes when the card has been updated
	UpdatedAt *time.Time `json:"updated_at,omitempty" bson:"updated_at,omitempty"`
}

type DynamoModel struct {
	// ID the identifier generated by db
	ID int `json:"id,omitempty" dynamodbav:"Id,omitempty"`
	// Name is the name of the card
	Name string `json:"name,omitempty" dynamodbav:"Name,omitempty"`
	// Priority must be one of these: ['urgent', 'high', 'normal', 'medium', 'low']
	Status string `json:"status,omitempty" dynamodbav:"Status,omitempty"`
	// CreatedAt describes when the card has been created
	CreatedAt time.Time `json:"created_at,omitempty" dynamodbav:"CreatedAt,omitempty"`
	// UpdatedAt describes when the card has been updated
	UpdatedAt time.Time `json:"updated_at,omitempty" dynamodbav:"UpdatedAt,omitempty"`
}

type Req struct {
	Name     string `json:"name" validate:"required"`
	Priority string `json:"priority" validate:"required"`
}

type Res struct {
	ID string `json:"id"`
}

type ErrRes struct {
	Code    string `json:"code"`
	Message string `json:"message"`
}

func NewErr(code, msg string) *ErrRes {
	return &ErrRes{Code: code, Message: msg}
}
